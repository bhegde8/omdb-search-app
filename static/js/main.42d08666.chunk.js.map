{"version":3,"sources":["store/moviesSlice.js","components/searchbox/SearchBox.js","components/resultsgrid/Result.js","components/resultsgrid/ResultsGrid.js","App.js","store/store.js","serviceWorker.js","index.js","components/searchbox/SearchBox.module.css","components/resultsgrid/ResultsGrid.module.css"],"names":["moviesSlice","createSlice","name","initialState","results","reducers","setResults","state","action","payload","removeResult","splice","fetchMovies","query","dispatch","axios","get","params","process","then","response","data","alert","catch","err","actions","selectMovies","movies","RedTextField","withStyles","root","borderColor","TextField","SearchBox","useState","setQuery","useDispatch","Fragment","className","styles","containerParent","Container","container","maxWidth","Typography","variant","align","color","gutterBottom","paragraph","Grid","spacing","justify","item","value","onChange","e","target","onKeyPress","key","size","Button","startIcon","onClick","CardPosterMedia","media","height","CardMedia","Result","props","Card","component","alt","image","title","CardContent","noWrap","CardActions","index","ResultsContainer","maxWidthLg","ResultsGrid","movieResults","useSelector","map","movie","xs","sm","md","darkMode","createMuiTheme","palette","type","primary","main","red","App","ThemeProvider","theme","CssBaseline","AppBar","position","Toolbar","configureStore","reducer","moviesReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.42d08666.chunk.js","sourcesContent":["/**\r\n * This slice manages the movie results state: i.e. fetching movie results\r\n * and removing results.\r\n */\r\n\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\nimport axios from 'axios';\r\n\r\n\r\nconst omdbUrl = 'https://omdbapi.com/'; // The URL to use for the OMDb API\r\n\r\n// Note: the reducers below are wrapped with Immer so that they do\r\n// not actually mutate the state, and are treated as immutable actions.\r\nexport const moviesSlice = createSlice({\r\n  name: 'movies',\r\n  initialState: {\r\n    results: [],\r\n  },\r\n  reducers: {\r\n    /**\r\n     * Sets the results state to the provided array (action.payload)\r\n     */\r\n    setResults: (state, action) => { \r\n      state.results = action.payload;\r\n    },\r\n\r\n    /**\r\n     * Removes the movie from the results state array located at the\r\n     * provided index (action.payload)\r\n     */\r\n    removeResult: (state, action) => {\r\n      state.results.splice(action.payload, 1);\r\n    },\r\n  },\r\n});\r\n\r\n/**\r\n * Retrieves movies from the OMDb API that match the provided query, and\r\n * sets the results state to the retrieved data.\r\n * @param {*} query \r\n */\r\nexport const fetchMovies = query => dispatch => {\r\n\r\n  // Perform a GET request on the API for movies matching the query.\r\n  axios.get(omdbUrl,\r\n    {\r\n      params: {\r\n        'apikey': process.env.REACT_APP_OMDB_KEY,\r\n        's': query,\r\n        'type': 'movie',\r\n      },\r\n    },\r\n  ).then(response => {\r\n    // If movie data was successfully retrieved, update the results state\r\n    // to the retrieved data. Otherwise, show the user what the error is.\r\n    // If response.data['Response'] is 'True', then the search was successful.\r\n    if (response.data['Response'] === 'True') {\r\n      dispatch(setResults(response.data['Search']));\r\n    } else {\r\n      alert(response.data['Error']);\r\n    }\r\n  }).catch(err => {\r\n    alert(err);\r\n  })\r\n};\r\n\r\n// Export the non-asynchronous reducer actions: setResults and removeResult\r\nexport const { setResults, removeResult } = moviesSlice.actions;\r\n\r\n// Export the movie results selector\r\nexport const selectMovies = state => state.movies.results;\r\n\r\n// Export the movies reducer\r\nexport default moviesSlice.reducer;\r\n","/**\r\n * This is the search box component.\r\n */\r\nimport React, { useState } from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchMovies } from '../../store/moviesSlice';\r\n\r\nimport { Container, Typography, Grid, Button, TextField } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nimport styles from './SearchBox.module.css';\r\n\r\n// To match the app's color scheme, use a text field\r\n// with a red outline for the search box (instead of a white outline)\r\nconst RedTextField = withStyles({\r\n  root: {\r\n    '& .MuiOutlinedInput-root': {\r\n      '& fieldset': {\r\n        borderColor: '#da0000',\r\n      },\r\n      '&:hover fieldset': {\r\n        borderColor: '#da0000',\r\n      },\r\n      '&.Mui-focused fieldset': {\r\n        borderColor: '#da0000',\r\n      },\r\n    },\r\n  },\r\n})(TextField);\r\n\r\n\r\nexport default function SearchBox() {\r\n  const [query, setQuery] = useState(''); // Contains the query typed in the search field\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={styles.containerParent}>\r\n        <Container className={styles.container} maxWidth=\"md\">\r\n\r\n          <Typography variant=\"h3\" align=\"center\" color=\"textPrimary\" gutterBottom>\r\n            OMDb Search\r\n          </Typography>\r\n\r\n          <Typography variant=\"h6\" align=\"center\" color=\"textSecondary\" paragraph>\r\n            Search for a movie title using the box below. Results from the OMDb\r\n            will be returned.\r\n          </Typography>\r\n\r\n          <Grid container spacing={2} justify=\"center\">\r\n            <Grid item>\r\n              <RedTextField\r\n                value={query}\r\n                onChange={e => setQuery(e.target.value)}\r\n                onKeyPress={(e) => {\r\n                  // For convenience, if the user presses the Enter key inside the search box,\r\n                  // fetch the movie results.\r\n                  if(e.key === 'Enter') {\r\n                    dispatch(fetchMovies(query));  \r\n                  }\r\n                }}\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<SearchIcon />}\r\n                onClick={() => dispatch(fetchMovies(query))}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n              \r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}","/**\r\n * This component is a singular movie result that will be a part\r\n * of the ResultsGrid.\r\n * \r\n * Each movie result is a Material-UI Card.\r\n */\r\nimport React from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { removeResult } from '../../store/moviesSlice';\r\n\r\nimport { Card, CardActions, CardMedia, CardContent, Typography, Button } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\n\r\n// Use a question mark as a placeholder image for movies that have no poster.\r\nconst noPosterImg = \"https://upload.wikimedia.org/wikipedia/commons/2/28/Question_mark_white.png\";\r\n\r\n// To show more of each movie poster, make the height of the\r\n// images larger than the default.\r\nconst CardPosterMedia = withStyles({\r\n  media: {\r\n    height: '40em',\r\n  },\r\n})(CardMedia);\r\n\r\n\r\nexport default function Result(props) {\r\n\r\n  const dispatch = useDispatch();\r\n  \r\n  return (\r\n    <Card>\r\n      <CardPosterMedia\r\n        component=\"img\"\r\n        alt=\"Movie Poster\"\r\n        image={\r\n          // If there is a poster image URL provided (not 'N/A'), use it.\r\n          // Otherwise, use the placeholder image.\r\n          props.data['Poster'] !== 'N/A' ? props.data['Poster'] : noPosterImg\r\n        }\r\n        title=\"Movie Poster\"\r\n      />\r\n      <CardContent>\r\n        <Typography gutterBottom variant=\"h6\" component=\"h6\" noWrap>\r\n          {props.data['Title']}\r\n        </Typography>\r\n        <Typography variant=\"body1\" color=\"textPrimary\" component=\"p\">\r\n          {props.data['Year']}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Button\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          startIcon={<ClearIcon />}\r\n          onClick={() => dispatch(removeResult(props.index))}\r\n        >\r\n          Delete\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n","/**\r\n * This component is the grid containing the movie results.\r\n */\r\nimport React from 'react';\r\n\r\nimport { useSelector } from 'react-redux';\r\nimport { selectMovies } from '../../store/moviesSlice';\r\n\r\nimport Result from './Result';\r\n\r\nimport { Container, Grid } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport styles from './ResultsGrid.module.css';\r\n\r\n// To make the results better fit the page, allow the results grid container's\r\n// max width to be 90%.\r\nconst ResultsContainer = withStyles({\r\n  maxWidthLg: {\r\n    'max-width': '90%',\r\n  }\r\n})(Container);\r\n\r\n\r\nexport default function ResultsGrid() {\r\n\r\n  // This selector will provide the movie results retrieved from the API\r\n  const movieResults = useSelector(selectMovies);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ResultsContainer className={styles.container}>\r\n\r\n        {/* Map each movie result into its own Result component in a grid.\r\n            Pass down the index that the movie is located at in the results\r\n            array (used for the remove feature), as well as the movie's\r\n            data (title, year, poster URL) */}\r\n            \r\n        <Grid container spacing={4}>\r\n          {movieResults.map((movie, index) => (\r\n            <Grid item key={index} xs={12} sm={6} md={4}>\r\n              <Result index={index} data={movie} />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n            \r\n      </ResultsContainer>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","/**\r\n * The root component of this web app.\r\n */\r\n\r\nimport React from 'react';\r\n\r\nimport styles from './App.css';\r\n\r\nimport SearchBox from './components/searchbox/SearchBox';\r\nimport ResultsGrid from './components/resultsgrid/ResultsGrid';\r\n\r\nimport { AppBar, CssBaseline, ThemeProvider, Toolbar, Typography } from '@material-ui/core';\r\nimport LocalMoviesIcon from '@material-ui/icons/LocalMovies';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport { red } from '@material-ui/core/colors';\r\n\r\n\r\n// Use the default dark theme provided by Material-UI with red\r\n// as the primary color\r\nconst darkMode = createMuiTheme({\r\n  palette: {\r\n    type: 'dark',\r\n    primary: {\r\n      main: red[800]\r\n    }\r\n  },\r\n});\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className={styles.App}>\r\n      <ThemeProvider theme={darkMode}>\r\n        \r\n        <CssBaseline />\r\n\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <LocalMoviesIcon />\r\n\r\n            <Typography variant=\"h5\">\r\n              OMDb Search\r\n            </Typography>\r\n\r\n          </Toolbar>\r\n        </AppBar>\r\n\r\n        <SearchBox />\r\n\r\n        <ResultsGrid />\r\n\r\n      </ThemeProvider>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","/**\r\n * This module provides the Redux store for the app.\r\n */\r\n\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport moviesReducer from './moviesSlice';\r\n\r\n// The only reducer this app uses is one that manages the movie\r\n// results\r\nexport default configureStore({\r\n  reducer: {\r\n    movies: moviesReducer,\r\n  },\r\n});","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './store/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerParent\":\"SearchBox_containerParent__tcBe7\",\"container\":\"SearchBox_container__3Drt_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ResultsGrid_container__2Mqg6\"};"],"sourceRoot":""}