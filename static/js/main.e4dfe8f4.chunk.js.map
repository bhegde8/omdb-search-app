{"version":3,"sources":["components/searchbox/SearchBox.module.css","components/resultsgrid/ResultsGrid.module.css","components/searchbox/SearchBox.js","components/resultsgrid/Result.js","components/resultsgrid/ResultsGrid.js","App.js","components/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","RedTextField","withStyles","root","borderColor","TextField","SearchBox","Fragment","className","styles","containerParent","Container","container","maxWidth","Typography","variant","align","color","gutterBottom","paragraph","Grid","spacing","justify","item","size","Button","startIcon","CardPosterMedia","media","height","CardMedia","Result","Card","CardActionArea","component","alt","image","title","CardContent","CardActions","cards","ResultsGrid","map","card","key","xs","sm","md","darkMode","createMuiTheme","palette","type","primary","main","red","App","ThemeProvider","theme","CssBaseline","AppBar","position","Toolbar","counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4dfe8f4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerParent\":\"SearchBox_containerParent__tcBe7\",\"container\":\"SearchBox_container__3Drt_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ResultsGrid_container__2Mqg6\"};","import React from 'react';\r\n\r\nimport { Container, Typography, Grid, Button, TextField } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nimport styles from './SearchBox.module.css';\r\n\r\nconst RedTextField = withStyles({\r\n  root: {\r\n    '& .MuiOutlinedInput-root': {\r\n      '& fieldset': {\r\n        borderColor: '#da0000',\r\n      },\r\n      '&:hover fieldset': {\r\n        borderColor: '#da0000',\r\n      },\r\n      '&.Mui-focused fieldset': {\r\n        borderColor: '#da0000',\r\n      },\r\n    },\r\n  },\r\n})(TextField);\r\n\r\nexport default function SearchBox() {\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={styles.containerParent}>\r\n        <Container className={styles.container} maxWidth=\"md\">\r\n\r\n              <Typography variant=\"h3\" align=\"center\" color=\"textPrimary\" gutterBottom>\r\n                OMDb Search\r\n              </Typography>\r\n\r\n              <Typography variant=\"h6\" align=\"center\" color=\"textSecondary\" paragraph>\r\n                Search for a movie title using the box below. Results from the OMDb\r\n                will be returned.\r\n              </Typography>\r\n\r\n              <Grid container spacing={2} justify=\"center\">\r\n                <Grid item>\r\n                <RedTextField variant=\"outlined\" size=\"small\" />\r\n\r\n                </Grid>\r\n                <Grid item>\r\n                  <Button variant=\"contained\" color=\"primary\" startIcon={<SearchIcon />}>\r\n                    Search\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n              \r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport { Card, CardActions, CardActionArea, CardMedia, CardContent, Typography,\r\n         Button } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nconst CardPosterMedia = withStyles({\r\n  media: {\r\n    height: '15em',\r\n  },\r\n})(CardMedia);\r\n\r\nexport default function Result() {\r\n\r\n  return (\r\n    <Card>\r\n      <CardActionArea>\r\n        <CardPosterMedia\r\n          component=\"img\"\r\n          alt=\"Movie Poster\"\r\n          image=\"https://upload.wikimedia.org/wikipedia/commons/a/ae/Beyond_a_Reasonable_Doubt_movie_poster.jpg\"\r\n          title=\"Movie Poster\"\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            Movie Title\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            Year\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        <Button variant=\"outlined\" size=\"small\" startIcon={<DeleteIcon />}>\r\n          Delete\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport Result from './Result';\r\n\r\nimport { Container, Grid } from '@material-ui/core';\r\n\r\nimport styles from './ResultsGrid.module.css';\r\n\r\n\r\nconst cards = [1, 2, 3, 4, 5, 6];\r\n\r\nexport default function ResultsGrid() {\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container className={styles.container}>\r\n\r\n        <Grid container spacing={4}>\r\n          {cards.map((card) => (\r\n            <Grid item key={card} xs={12} sm={6} md={4}>\r\n              <Result />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n            \r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport styles from './App.css';\r\n\r\nimport SearchBox from './components/searchbox/SearchBox';\r\nimport ResultsGrid from './components/resultsgrid/ResultsGrid';\r\n\r\nimport { AppBar, CssBaseline, ThemeProvider, Toolbar, Typography } from '@material-ui/core';\r\nimport LocalMoviesIcon from '@material-ui/icons/LocalMovies';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport { red } from '@material-ui/core/colors';\r\n\r\nconst darkMode = createMuiTheme({\r\n  palette: {\r\n    type: 'dark',\r\n    primary: {\r\n      main: red[800]\r\n    }\r\n  },\r\n});\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className={styles.App}>\r\n      <ThemeProvider theme={darkMode}>\r\n        \r\n        <CssBaseline />\r\n\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <LocalMoviesIcon />\r\n\r\n            <Typography variant=\"h5\">\r\n              OMDb Search\r\n            </Typography>\r\n\r\n          </Toolbar>\r\n        </AppBar>\r\n\r\n        <SearchBox />\r\n\r\n        <ResultsGrid />\r\n\r\n      </ThemeProvider>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../components/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}